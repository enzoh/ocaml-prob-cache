# OASIS_START
# DO NOT EDIT (digest: aea796ceca55d8ef624d14ecea67e564)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library prob_cache
"src/core/prob_cache.cmxs": use_prob_cache
<src/core/*.ml{,i,y}>: pkg_containers
<src/core/*.ml{,i,y}>: pkg_containers.advanced
<src/core/*.ml{,i,y}>: pkg_containers.data
<src/core/*.ml{,i,y}>: pkg_lacaml
<src/core/*.ml{,i,y}>: pkg_or_errors
<src/core/*.ml{,i,y}>: pkg_ppx_deriving
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.make
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/core/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/core/*.ml{,i,y}>: pkg_sequence
# Library examples
"src/examples/examples.cmxs": use_examples
<src/examples/*.ml{,i,y}>: pkg_containers
<src/examples/*.ml{,i,y}>: pkg_containers.advanced
<src/examples/*.ml{,i,y}>: pkg_containers.data
<src/examples/*.ml{,i,y}>: pkg_lacaml
<src/examples/*.ml{,i,y}>: pkg_or_errors
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.make
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/examples/*.ml{,i,y}>: pkg_sequence
<src/examples/*.ml{,i,y}>: use_prob_cache
# Library containers
"src/containers/containers.cmxs": use_containers
<src/containers/*.ml{,i,y}>: pkg_containers
<src/containers/*.ml{,i,y}>: pkg_containers.advanced
<src/containers/*.ml{,i,y}>: pkg_containers.data
<src/containers/*.ml{,i,y}>: pkg_lacaml
<src/containers/*.ml{,i,y}>: pkg_or_errors
<src/containers/*.ml{,i,y}>: pkg_or_errors_containers
<src/containers/*.ml{,i,y}>: pkg_ppx_deriving
<src/containers/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/containers/*.ml{,i,y}>: pkg_ppx_deriving.make
<src/containers/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/containers/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/containers/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/containers/*.ml{,i,y}>: pkg_sequence
<src/containers/*.ml{,i,y}>: use_prob_cache
# Library riak
"src/riak/riak.cmxs": use_riak
<src/riak/*.ml{,i,y}>: pkg_async
<src/riak/*.ml{,i,y}>: pkg_bitstring
<src/riak/*.ml{,i,y}>: pkg_containers
<src/riak/*.ml{,i,y}>: pkg_containers.advanced
<src/riak/*.ml{,i,y}>: pkg_containers.data
<src/riak/*.ml{,i,y}>: pkg_core
<src/riak/*.ml{,i,y}>: pkg_lacaml
<src/riak/*.ml{,i,y}>: pkg_or_errors
<src/riak/*.ml{,i,y}>: pkg_or_errors_async
<src/riak/*.ml{,i,y}>: pkg_ppx_deriving
<src/riak/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/riak/*.ml{,i,y}>: pkg_ppx_deriving.make
<src/riak/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/riak/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/riak/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/riak/*.ml{,i,y}>: pkg_riakc_ppx
<src/riak/*.ml{,i,y}>: pkg_sequence
<src/riak/*.ml{,i,y}>: pkg_threads
<src/riak/*.ml{,i,y}>: use_prob_cache
# Executable containers_sprinkler
"src/containers_examples/containers_sprinkler.byte": pkg_containers
"src/containers_examples/containers_sprinkler.byte": pkg_containers.advanced
"src/containers_examples/containers_sprinkler.byte": pkg_containers.data
"src/containers_examples/containers_sprinkler.byte": pkg_lacaml
"src/containers_examples/containers_sprinkler.byte": pkg_or_errors
"src/containers_examples/containers_sprinkler.byte": pkg_or_errors_containers
"src/containers_examples/containers_sprinkler.byte": pkg_ppx_deriving
"src/containers_examples/containers_sprinkler.byte": pkg_ppx_deriving.iter
"src/containers_examples/containers_sprinkler.byte": pkg_ppx_deriving.make
"src/containers_examples/containers_sprinkler.byte": pkg_ppx_deriving.ord
"src/containers_examples/containers_sprinkler.byte": pkg_ppx_deriving.show
"src/containers_examples/containers_sprinkler.byte": pkg_ppx_deriving_protobuf
"src/containers_examples/containers_sprinkler.byte": pkg_sequence
"src/containers_examples/containers_sprinkler.byte": use_containers
"src/containers_examples/containers_sprinkler.byte": use_examples
"src/containers_examples/containers_sprinkler.byte": use_prob_cache
# Executable containers_coin_flip
"src/containers_examples/containers_coin_flip.byte": pkg_containers
"src/containers_examples/containers_coin_flip.byte": pkg_containers.advanced
"src/containers_examples/containers_coin_flip.byte": pkg_containers.data
"src/containers_examples/containers_coin_flip.byte": pkg_lacaml
"src/containers_examples/containers_coin_flip.byte": pkg_or_errors
"src/containers_examples/containers_coin_flip.byte": pkg_or_errors_containers
"src/containers_examples/containers_coin_flip.byte": pkg_ppx_deriving
"src/containers_examples/containers_coin_flip.byte": pkg_ppx_deriving.iter
"src/containers_examples/containers_coin_flip.byte": pkg_ppx_deriving.make
"src/containers_examples/containers_coin_flip.byte": pkg_ppx_deriving.ord
"src/containers_examples/containers_coin_flip.byte": pkg_ppx_deriving.show
"src/containers_examples/containers_coin_flip.byte": pkg_ppx_deriving_protobuf
"src/containers_examples/containers_coin_flip.byte": pkg_sequence
"src/containers_examples/containers_coin_flip.byte": use_containers
"src/containers_examples/containers_coin_flip.byte": use_examples
"src/containers_examples/containers_coin_flip.byte": use_prob_cache
<src/containers_examples/*.ml{,i,y}>: pkg_containers
<src/containers_examples/*.ml{,i,y}>: pkg_containers.advanced
<src/containers_examples/*.ml{,i,y}>: pkg_containers.data
<src/containers_examples/*.ml{,i,y}>: pkg_lacaml
<src/containers_examples/*.ml{,i,y}>: pkg_or_errors
<src/containers_examples/*.ml{,i,y}>: pkg_or_errors_containers
<src/containers_examples/*.ml{,i,y}>: pkg_ppx_deriving
<src/containers_examples/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/containers_examples/*.ml{,i,y}>: pkg_ppx_deriving.make
<src/containers_examples/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/containers_examples/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/containers_examples/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/containers_examples/*.ml{,i,y}>: pkg_sequence
<src/containers_examples/*.ml{,i,y}>: use_containers
<src/containers_examples/*.ml{,i,y}>: use_examples
<src/containers_examples/*.ml{,i,y}>: use_prob_cache
# Executable riak_sprinkler
"src/riak_examples/riak_sprinkler.byte": pkg_async
"src/riak_examples/riak_sprinkler.byte": pkg_bitstring
"src/riak_examples/riak_sprinkler.byte": pkg_containers
"src/riak_examples/riak_sprinkler.byte": pkg_containers.advanced
"src/riak_examples/riak_sprinkler.byte": pkg_containers.data
"src/riak_examples/riak_sprinkler.byte": pkg_core
"src/riak_examples/riak_sprinkler.byte": pkg_lacaml
"src/riak_examples/riak_sprinkler.byte": pkg_or_errors
"src/riak_examples/riak_sprinkler.byte": pkg_or_errors_async
"src/riak_examples/riak_sprinkler.byte": pkg_ppx_deriving
"src/riak_examples/riak_sprinkler.byte": pkg_ppx_deriving.iter
"src/riak_examples/riak_sprinkler.byte": pkg_ppx_deriving.make
"src/riak_examples/riak_sprinkler.byte": pkg_ppx_deriving.ord
"src/riak_examples/riak_sprinkler.byte": pkg_ppx_deriving.show
"src/riak_examples/riak_sprinkler.byte": pkg_ppx_deriving_protobuf
"src/riak_examples/riak_sprinkler.byte": pkg_riakc_ppx
"src/riak_examples/riak_sprinkler.byte": pkg_sequence
"src/riak_examples/riak_sprinkler.byte": pkg_threads
"src/riak_examples/riak_sprinkler.byte": use_examples
"src/riak_examples/riak_sprinkler.byte": use_prob_cache
"src/riak_examples/riak_sprinkler.byte": use_riak
# Executable riak_coin_flip
"src/riak_examples/riak_coin_flip.byte": pkg_async
"src/riak_examples/riak_coin_flip.byte": pkg_bitstring
"src/riak_examples/riak_coin_flip.byte": pkg_containers
"src/riak_examples/riak_coin_flip.byte": pkg_containers.advanced
"src/riak_examples/riak_coin_flip.byte": pkg_containers.data
"src/riak_examples/riak_coin_flip.byte": pkg_core
"src/riak_examples/riak_coin_flip.byte": pkg_lacaml
"src/riak_examples/riak_coin_flip.byte": pkg_or_errors
"src/riak_examples/riak_coin_flip.byte": pkg_or_errors_async
"src/riak_examples/riak_coin_flip.byte": pkg_ppx_deriving
"src/riak_examples/riak_coin_flip.byte": pkg_ppx_deriving.iter
"src/riak_examples/riak_coin_flip.byte": pkg_ppx_deriving.make
"src/riak_examples/riak_coin_flip.byte": pkg_ppx_deriving.ord
"src/riak_examples/riak_coin_flip.byte": pkg_ppx_deriving.show
"src/riak_examples/riak_coin_flip.byte": pkg_ppx_deriving_protobuf
"src/riak_examples/riak_coin_flip.byte": pkg_riakc_ppx
"src/riak_examples/riak_coin_flip.byte": pkg_sequence
"src/riak_examples/riak_coin_flip.byte": pkg_threads
"src/riak_examples/riak_coin_flip.byte": use_examples
"src/riak_examples/riak_coin_flip.byte": use_prob_cache
"src/riak_examples/riak_coin_flip.byte": use_riak
<src/riak_examples/*.ml{,i,y}>: pkg_async
<src/riak_examples/*.ml{,i,y}>: pkg_bitstring
<src/riak_examples/*.ml{,i,y}>: pkg_containers
<src/riak_examples/*.ml{,i,y}>: pkg_containers.advanced
<src/riak_examples/*.ml{,i,y}>: pkg_containers.data
<src/riak_examples/*.ml{,i,y}>: pkg_core
<src/riak_examples/*.ml{,i,y}>: pkg_lacaml
<src/riak_examples/*.ml{,i,y}>: pkg_or_errors
<src/riak_examples/*.ml{,i,y}>: pkg_or_errors_async
<src/riak_examples/*.ml{,i,y}>: pkg_ppx_deriving
<src/riak_examples/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/riak_examples/*.ml{,i,y}>: pkg_ppx_deriving.make
<src/riak_examples/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/riak_examples/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/riak_examples/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/riak_examples/*.ml{,i,y}>: pkg_riakc_ppx
<src/riak_examples/*.ml{,i,y}>: pkg_sequence
<src/riak_examples/*.ml{,i,y}>: pkg_threads
<src/riak_examples/*.ml{,i,y}>: use_examples
<src/riak_examples/*.ml{,i,y}>: use_prob_cache
<src/riak_examples/*.ml{,i,y}>: use_riak
# OASIS_STOP

# OASIS_START
# DO NOT EDIT (digest: e04a6621b034083a1d7cc2fa5778445f)
version = "0.1"
description = "Probability cache library for OCaml"
requires =
"lacaml containers containers.data containers.advanced sequence ppx_deriving ppx_deriving.make ppx_deriving.ord ppx_deriving.show ppx_deriving.iter ppx_deriving_protobuf or_errors"
archive(byte) = "prob_cache.cma"
archive(byte, plugin) = "prob_cache.cma"
archive(native) = "prob_cache.cmxa"
archive(native, plugin) = "prob_cache.cmxs"
exists_if = "prob_cache.cma"
package "riak" (
 version = "0.1"
 description = "Probability cache library for OCaml"
 requires =
 "prob_cache threads ppx_deriving ppx_deriving.ord ppx_deriving.show ppx_deriving.iter ppx_deriving_protobuf prob_cache core async bitstring riakc_ppx or_errors_async"
 archive(byte) = "riak.cma"
 archive(byte, plugin) = "riak.cma"
 archive(native) = "riak.cmxa"
 archive(native, plugin) = "riak.cmxs"
 exists_if = "riak.cma"
)

package "examples" (
 version = "0.1"
 description = "Probability cache library for OCaml"
 requires = "prob_cache"
 archive(byte) = "examples.cma"
 archive(byte, plugin) = "examples.cma"
 archive(native) = "examples.cmxa"
 archive(native, plugin) = "examples.cmxs"
 exists_if = "examples.cma"
)

package "containers" (
 version = "0.1"
 description = "Probability cache library for OCaml"
 requires =
 "prob_cache containers containers.data containers.advanced sequence ppx_deriving ppx_deriving.ord ppx_deriving.show ppx_deriving.iter ppx_deriving_protobuf or_errors_containers"
 archive(byte) = "containers.cma"
 archive(byte, plugin) = "containers.cma"
 archive(native) = "containers.cmxa"
 archive(native, plugin) = "containers.cmxs"
 exists_if = "containers.cma"
)
# OASIS_STOP

